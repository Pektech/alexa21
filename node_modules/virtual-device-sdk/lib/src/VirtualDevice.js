"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var http = require("http");
var https = require("https");
var pathModule = require("path");
var URL = require("url");
var VirtualDeviceParameterMapper = {
    asyncMode: "async_mode",
    conversationId: "conversation_id",
    locale: "language_code",
    locationLat: "location_lat",
    locationLong: "location_long",
    phoneNumber: "phone_number",
    projectId: "project_id",
    screenMode: "screen_mode",
    skipSTT: "skip_stt",
    stt: "stt",
    token: "user_id",
    voiceID: "voice_id",
};
var VirtualDevice = (function () {
    function VirtualDevice(arg0, locale, voiceID, skipSTT, asyncMode, stt, locationLat, locationLong, conversationId, screenMode, client, projectId) {
        this.arg0 = arg0;
        this.locale = locale;
        this.voiceID = voiceID;
        this.skipSTT = skipSTT;
        this.asyncMode = asyncMode;
        this.stt = stt;
        this.locationLat = locationLat;
        this.locationLong = locationLong;
        this.conversationId = conversationId;
        this.screenMode = screenMode;
        this.client = client;
        this.projectId = projectId;
        this.homophones = {};
        this.baseURL = process.env.VIRTUAL_DEVICE_BASE_URL
            ? process.env.VIRTUAL_DEVICE_BASE_URL
            : "https://virtual-device.bespoken.io";
        if (arg0 === Object(arg0)) {
            this.configuration = arg0;
        }
        else {
            this.configuration = {
                token: arg0,
                locale: locale,
                voiceID: voiceID,
                skipSTT: skipSTT,
                asyncMode: asyncMode,
                stt: stt,
                locationLat: locationLat,
                locationLong: locationLong,
                conversationId: conversationId,
                screenMode: screenMode,
                client: client,
                projectId: projectId,
            };
        }
    }
    VirtualDevice.prototype.addHomophones = function (word, homophones) {
        homophones = homophones.map(function (s) { return s.trim(); });
        this.homophones[word] = homophones;
    };
    VirtualDevice.prototype.httpInterface = function (url) {
        if (url.protocol === "https:") {
            return https;
        }
        else {
            return http;
        }
    };
    VirtualDevice.prototype.httpInterfacePort = function (url) {
        if (url.port) {
            return url.port;
        }
        if (url.protocol === "https:") {
            return 443;
        }
        else {
            return 80;
        }
    };
    VirtualDevice.prototype.message = function (message, debug, phrases, newConversation) {
        var _this = this;
        var encodedMessage = encodeURIComponent(message);
        var url = this.baseURL + "/process?";
        if (encodedMessage) {
            url += "&message=" + encodedMessage;
        }
        if (phrases) {
            for (var _i = 0, phrases_1 = phrases; _i < phrases_1.length; _i++) {
                var phrase = phrases_1[_i];
                url += "&phrases=" + encodeURIComponent(phrase);
            }
        }
        if (debug) {
            url += "&debug=true";
        }
        for (var _a = 0, _b = Object.keys(this.configuration); _a < _b.length; _a++) {
            var key = _b[_a];
            var parameterValue = this.configuration[key];
            if (!parameterValue) {
                continue;
            }
            var parameterName = VirtualDeviceParameterMapper[key] || key;
            url += "&" + parameterName + "=" + parameterValue;
        }
        url = encodeURI(url);
        var urlParsed = URL.parse(this.baseURL);
        return new Promise(function (resolve, reject) {
            var callback = function (response) {
                var data = "";
                response.on("data", function (chunk) {
                    data += chunk;
                });
                response.on("end", function () {
                    if (response.statusCode === 200) {
                        var result = JSON.parse(data);
                        result.message = message;
                        _this.applyHomophones(result);
                        resolve(result);
                    }
                    else {
                        reject(data);
                    }
                });
            };
            var request = _this.httpInterface(urlParsed).get(url, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.end();
        });
    };
    VirtualDevice.prototype.batchMessage = function (messages, debug) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var path, _i, _a, key, parameterValue, parameterName, procesedMessages, error_1, url;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        path = "/batch_process?";
                        for (_i = 0, _a = Object.keys(this.configuration); _i < _a.length; _i++) {
                            key = _a[_i];
                            parameterValue = this.configuration[key];
                            if (parameterValue === undefined) {
                                continue;
                            }
                            parameterName = VirtualDeviceParameterMapper[key] || key;
                            path += "&" + parameterName + "=" + parameterValue;
                        }
                        if (debug) {
                            path += "&debug=true";
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4, this.processMessages(messages)];
                    case 2:
                        procesedMessages = _b.sent();
                        return [3, 4];
                    case 3:
                        error_1 = _b.sent();
                        return [2, Promise.reject(error_1)];
                    case 4:
                        url = URL.parse(this.baseURL);
                        return [2, new Promise(function (resolve, reject) {
                                var callback = function (response) {
                                    var data = "";
                                    response.on("data", function (chunk) {
                                        data += chunk;
                                    });
                                    response.on("end", function () {
                                        if (response.statusCode === 200) {
                                            if (_this.configuration.asyncMode) {
                                                resolve(_this.handleAsynchResponse(data));
                                            }
                                            else {
                                                var virtualDeviceResponse = _this.handleBatchResponse(data);
                                                if (virtualDeviceResponse.error) {
                                                    resolve(virtualDeviceResponse.error);
                                                }
                                                else {
                                                    resolve(virtualDeviceResponse.results);
                                                }
                                            }
                                        }
                                        else {
                                            reject(data);
                                        }
                                    });
                                };
                                var input = {
                                    messages: procesedMessages,
                                };
                                var inputString = JSON.stringify(input);
                                var requestOptions = {
                                    headers: {
                                        "Content-Length": new Buffer(inputString).length,
                                        "Content-Type": "application/json",
                                    },
                                    host: url.hostname,
                                    method: "POST",
                                    path: encodeURI(path),
                                    port: _this.httpInterfacePort(url),
                                };
                                var request = _this.httpInterface(url).request(requestOptions, callback);
                                request.on("error", function (error) {
                                    reject(error);
                                });
                                request.write(inputString);
                                request.end();
                            })];
                }
            });
        });
    };
    VirtualDevice.prototype.getConversationResults = function (uuid) {
        var _this = this;
        if (!this.configuration.asyncMode) {
            throw Error("Conversation Results only available in async mode");
        }
        var path = "/conversation?uuid=" + uuid;
        var url = URL.parse(this.baseURL);
        return new Promise(function (resolve, reject) {
            var callback = function (response) {
                var data = "";
                response.on("data", function (chunk) {
                    data += chunk;
                });
                response.on("end", function () {
                    if (response.statusCode === 200) {
                        var result = _this.handleBatchResponse(data);
                        if (result.error) {
                            reject(new Error(result.error));
                            return;
                        }
                        resolve(result);
                    }
                    else {
                        reject(data);
                    }
                });
            };
            var requestOptions = {
                headers: {
                    "Content-Type": "application/json",
                },
                host: url.hostname,
                method: "GET",
                path: path,
                port: _this.httpInterfacePort(url),
            };
            var request = _this.httpInterface(url).request(requestOptions, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.end();
        });
    };
    VirtualDevice.prototype.stopConversation = function (uuid) {
        var _this = this;
        if (!this.configuration.asyncMode) {
            throw Error("Conversation stop only available in async mode");
        }
        var path = "/conversation_stop";
        var url = URL.parse(this.baseURL);
        return new Promise(function (resolve, reject) {
            var callback = function (response) {
                var data = "";
                response.on("data", function (chunk) {
                    data += chunk;
                });
                response.on("end", function () {
                    if (response.statusCode === 200) {
                        resolve();
                    }
                    else {
                        reject(data);
                    }
                });
            };
            var input = {
                uuid: uuid,
            };
            var inputString = JSON.stringify(input);
            var requestOptions = {
                headers: {
                    "Content-Length": new Buffer(inputString).length,
                    "Content-Type": "application/json",
                },
                host: url.hostname,
                method: "POST",
                path: path,
                port: _this.httpInterfacePort(url),
            };
            var request = _this.httpInterface(url).request(requestOptions, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.write(inputString);
            request.end();
        });
    };
    VirtualDevice.prototype.waitForSessionToEnd = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ms;
            return __generator(this, function (_a) {
                ms = process.env.SESSION_IDLE_MS
                    ? parseInt(process.env.SESSION_IDLE_MS, 10)
                    : 8000;
                return [2, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
            });
        });
    };
    VirtualDevice.prototype.handleBatchResponse = function (data) {
        var json = JSON.parse(data);
        if (json && json.error) {
            return json;
        }
        var results;
        if (!json || !json.results) {
            results = [];
        }
        else {
            results = json.results;
        }
        for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
            var result = results_1[_i];
            result.status = json.status;
            this.applyHomophones(result);
        }
        return {
            results: results,
            status: json.status,
        };
    };
    VirtualDevice.prototype.handleAsynchResponse = function (data) {
        return JSON.parse(data);
    };
    VirtualDevice.prototype.applyHomophones = function (result) {
        if (!result.debug) {
            result.debug = {};
        }
        if (!result.transcript) {
            return;
        }
        var keys = Object.keys(this.homophones);
        result.debug.rawTranscript = result.transcript;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            var word = key.split("_").join(" ");
            var homophones = this.homophones[key];
            for (var _a = 0, homophones_1 = homophones; _a < homophones_1.length; _a++) {
                var homophone = homophones_1[_a];
                result.transcript = result.transcript.split(new RegExp("\\b" + homophone + "\\b")).join(word);
            }
        }
    };
    VirtualDevice.prototype.processMessages = function (messages) {
        return __awaiter(this, void 0, void 0, function () {
            var mesageProcessor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mesageProcessor = new MessageProcesor(messages);
                        return [4, mesageProcessor.process()];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    return VirtualDevice;
}());
exports.VirtualDevice = VirtualDevice;
var MessageProcesor = (function () {
    function MessageProcesor(messages) {
        this.messages = messages;
    }
    MessageProcesor.prototype.process = function () {
        var _this = this;
        return Promise.all(this.messages.map(function (message) { return _this.processMessage(message); }));
    };
    MessageProcesor.prototype.processMessage = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var fileContent, extension, frameRate, channels, sampleWidth, filePath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        frameRate = message.audio ? message.audio.frameRate : undefined;
                        channels = message.audio ? message.audio.channels : undefined;
                        sampleWidth = message.audio ? message.audio.sampleWidth : undefined;
                        if (!message.audio) return [3, 6];
                        if (!(message.audio.audioPath || message.audio.audioURL)) return [3, 5];
                        if (!message.audio.audioPath) return [3, 1];
                        filePath = message.audio.audioPath;
                        fileContent = this.getLocalFile(message.audio.audioPath);
                        return [3, 4];
                    case 1:
                        if (!message.audio.audioURL) return [3, 3];
                        filePath = message.audio.audioURL;
                        return [4, this.fetchFile(message.audio.audioURL)];
                    case 2:
                        fileContent = _a.sent();
                        return [3, 4];
                    case 3:
                        filePath = "";
                        fileContent = "";
                        _a.label = 4;
                    case 4:
                        extension = this.getExtension(filePath);
                        return [3, 6];
                    case 5: throw new Error("either audioPath or audioURL should be set.");
                    case 6: return [2, {
                            audio: fileContent,
                            channels: channels,
                            format: extension,
                            frame_rate: frameRate,
                            phrases: message.phrases,
                            sample_width: sampleWidth,
                            text: message.text,
                            url: message.url,
                        }];
                }
            });
        });
    };
    MessageProcesor.prototype.getLocalFile = function (path) {
        var fileContents = fs.readFileSync(path);
        return Buffer.from(fileContents).toString("base64");
    };
    MessageProcesor.prototype.fetchFile = function (url) {
        return new Promise(function (resolve, reject) {
            var data = [];
            var req = https.get(url, function (res) {
                res.on("data", function (chunk) {
                    data.push(chunk);
                });
                res.on("end", function () {
                    if (res.statusCode === 200) {
                        var buffer = Buffer.concat(data);
                        resolve(buffer.toString("base64"));
                    }
                    else {
                        reject();
                    }
                });
            });
            req.on("error", function (error) {
                reject(error.message);
            });
            req.end();
        });
    };
    MessageProcesor.prototype.getExtension = function (path) {
        var extname = pathModule.extname(path);
        if (extname && extname.length > 0) {
            return extname.substr(1);
        }
        return "";
    };
    return MessageProcesor;
}());
//# sourceMappingURL=VirtualDevice.js.map