"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
const Test_1 = require("../tests/Test");
class TestSuite {
    static create(results) {
        const elements = [];
        results.testResults.forEach((testResult) => {
            if (testResult.testResults == null) {
                console.error("Unexpected testResults field missing");
                if (testResult.assertionResults != null) {
                    console.warn("Attempting to use assertionResults: results are unpredictable");
                    testResult.testResults = testResult.assertionResults;
                }
            }
            let testStatusClass;
            const testSectionStatus = new Map();
            for (const result of testResult.testResults) {
                if (result.status === Constants_1.Constants.TEST_STATUS_FAIL) {
                    if (testStatusClass === Constants_1.Constants.BOTH_TEST) {
                    }
                    else if (testStatusClass === Constants_1.Constants.PASSED_TEST) {
                        testStatusClass = Constants_1.Constants.BOTH_TEST;
                    }
                    else {
                        testStatusClass = Constants_1.Constants.FAILED_TEST;
                    }
                    for (let index = 0; index < result.ancestorTitles.length; index++) {
                        const titlesCopy = result.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSuite.JOIN_CHAR);
                        if (testSectionStatus.has(key)) {
                            if (testSectionStatus.get(key) === Constants_1.Constants.PASSED_TEST) {
                                testSectionStatus.set(key, Constants_1.Constants.BOTH_TEST);
                            }
                        }
                        else {
                            testSectionStatus.set(key, Constants_1.Constants.FAILED_TEST);
                        }
                    }
                }
                if (result.status === Constants_1.Constants.TEST_STATUS_PASS) {
                    if (testStatusClass === Constants_1.Constants.BOTH_TEST) {
                    }
                    else if (testStatusClass === Constants_1.Constants.FAILED_TEST) {
                        testStatusClass = Constants_1.Constants.BOTH_TEST;
                    }
                    else {
                        testStatusClass = Constants_1.Constants.PASSED_TEST;
                    }
                    for (let index = 0; index < result.ancestorTitles.length; index++) {
                        const titlesCopy = result.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSuite.JOIN_CHAR);
                        if (testSectionStatus.has(key)) {
                            if (testSectionStatus.get(key) === Constants_1.Constants.FAILED_TEST) {
                                testSectionStatus.set(key, Constants_1.Constants.BOTH_TEST);
                            }
                        }
                        else {
                            testSectionStatus.set(key, Constants_1.Constants.PASSED_TEST);
                        }
                    }
                }
            }
            if (testStatusClass === undefined) {
                testStatusClass = Constants_1.Constants.PASSED_TEST;
            }
            const div = document.createElement("div");
            div.classList.add("my-3", "p-3", "bg-white", "rounded", "box-shadow", testStatusClass);
            const h5 = document.createElement("h5");
            h5.classList.add("border-bottom", "pb-2", "mb-0", "display-5");
            h5.textContent = testResult.testFilePath;
            div.id = testResult.testFilePath;
            div.appendChild(h5);
            const divMap = new Map();
            testResult.testResults.forEach((test) => {
                const element = Test_1.Test.create(test);
                if (test.ancestorTitles.length > 0) {
                    test.ancestorTitles.forEach((title, index) => {
                        const titlesCopy = test.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSuite.JOIN_CHAR);
                        if (divMap.has(key)) {
                            divMap.get(key).appendChild(element);
                        }
                        else {
                            const nestDiv = document.createElement("div");
                            const statusClass = testSectionStatus.get(key) || Constants_1.Constants.PASSED_TEST;
                            nestDiv.classList.add("my-3", "p-3", "bg-white", "rounded", "box-shadow", statusClass);
                            const h6 = document.createElement("h6");
                            h6.classList.add("border-bottom", "pb-2", "mb-0", "display-6");
                            h6.textContent = title;
                            nestDiv.appendChild(h6);
                            nestDiv.appendChild(element);
                            nestDiv.id = key;
                            divMap.set(key, nestDiv);
                            if (index === 0) {
                                div.appendChild(nestDiv);
                            }
                            else {
                                titlesCopy.pop();
                                const parentKey = titlesCopy.join(TestSuite.JOIN_CHAR);
                                divMap.get(parentKey).appendChild(nestDiv);
                            }
                        }
                    });
                }
                else {
                    div.appendChild(element);
                }
            });
            elements.push(div);
        });
        return elements;
    }
}
exports.TestSuite = TestSuite;
TestSuite.JOIN_CHAR = ".";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFN1aXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlbmRlci9zdWl0ZXMvVGVzdFN1aXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQXlDO0FBQ3pDLHdDQUFxQztBQU9yQyxNQUFhLFNBQVM7SUFlWCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQThCO1FBQy9DLE1BQU0sUUFBUSxHQUFrQixFQUFFLENBQUM7UUFFbkMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQVF2QyxJQUFJLFVBQVUsQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO2dCQUVoQyxPQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7Z0JBQ3RELElBQUssVUFBa0IsQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7b0JBRTlDLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0RBQStELENBQUMsQ0FBQztvQkFDOUUsVUFBVSxDQUFDLFdBQVcsR0FBSSxVQUFrQixDQUFDLGdCQUFnQixDQUFDO2lCQUNqRTthQUNKO1lBR0QsSUFBSSxlQUFlLENBQUM7WUFFcEIsTUFBTSxpQkFBaUIsR0FBd0IsSUFBSSxHQUFHLEVBQWtCLENBQUM7WUFDekUsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO2dCQUd6QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUsscUJBQVMsQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDOUMsSUFBSSxlQUFlLEtBQUsscUJBQVMsQ0FBQyxTQUFTLEVBQUU7cUJBRTVDO3lCQUFNLElBQUksZUFBZSxLQUFLLHFCQUFTLENBQUMsV0FBVyxFQUFFO3dCQUNsRCxlQUFlLEdBQUcscUJBQVMsQ0FBQyxTQUFTLENBQUM7cUJBQ3pDO3lCQUFNO3dCQUNILGVBQWUsR0FBRyxxQkFBUyxDQUFDLFdBQVcsQ0FBQztxQkFDM0M7b0JBRUQsS0FBSyxJQUFJLEtBQUss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