"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var skill_testing_ml_1 = require("skill-testing-ml");
var InitUtil = (function () {
    function InitUtil(type, platform, locales, projectName, virtualDeviceToken) {
        this.type = type;
        this.platform = platform;
        this.locales = locales;
        this.projectName = projectName;
        this.virtualDeviceToken = virtualDeviceToken;
        this.isMultilocale = locales.split(",").length > 1;
    }
    InitUtil.prototype.createFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var finalPlatform;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        finalPlatform = ["both", "google"].indexOf(this.platform) > -1 ? "google" : this.platform;
                        if (!(this.type === "both")) return [3, 3];
                        return [4, this.createTestFilesForType("unit", finalPlatform)];
                    case 1:
                        _a.sent();
                        return [4, this.createTestFilesForType("e2e", finalPlatform)];
                    case 2:
                        _a.sent();
                        return [3, 5];
                    case 3: return [4, this.createTestFilesForType(this.type, finalPlatform)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2];
                }
            });
        });
    };
    InitUtil.prototype.createTestFilesForType = function (type, platform) {
        return __awaiter(this, void 0, void 0, function () {
            var currentFolder, testFolder, ymlContent, testingFileContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentFolder = process.cwd();
                        if (!fs.existsSync(currentFolder + "/test")) {
                            fs.mkdirSync(currentFolder + "/test");
                        }
                        testFolder = currentFolder + "/test/" + type;
                        if (!fs.existsSync(testFolder)) {
                            fs.mkdirSync(testFolder);
                        }
                        return [4, this.createMultilocaleFiles(type)];
                    case 1:
                        _a.sent();
                        ymlContent = this.getYmlContent(type, platform);
                        testingFileContent = this.getTestingJson(type);
                        return [4, this.writeFile(testFolder + "/index.test.yml", ymlContent)];
                    case 2:
                        _a.sent();
                        return [4, this.writeFile(currentFolder + "/test/" + type + "/testing.json", JSON.stringify(testingFileContent, null, 4))];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    InitUtil.prototype.getYmlContent = function (type, platform) {
        var parser = new skill_testing_ml_1.TestParser();
        var configuration = {
            description: this.getTestSuiteDescription(type),
        };
        var interactions = [this.getLaunchInteraction(type), this.getHelpInteraction(type, platform)];
        var yamlObject = {
            configuration: configuration,
            "tests": [
                {
                    interactions: interactions,
                    "name": this.getTestName(),
                },
            ],
        };
        parser.loadYamlObject(yamlObject);
        var contents = parser.contents;
        if (type === "unit" && platform === "google") {
            contents = ("" + contents).replace("- HelpIntent :", "- HelpIntent : #replace with the intent for help");
        }
        var comment = this.getHeaderComment(type);
        return "" + comment + contents;
    };
    InitUtil.prototype.getTestSuiteDescription = function (type) {
        if (this.isMultilocale) {
            return "testSuiteDescription";
        }
        if (type === "unit") {
            return "My first unit test suite";
        }
        else if (type === "e2e") {
            return "My first e2e test suite";
        }
        return "";
    };
    InitUtil.prototype.getTestName = function () {
        if (this.isMultilocale) {
            return "firstTestName";
        }
        return "Launch and ask for help";
    };
    InitUtil.prototype.getLaunchInteraction = function (type) {
        var expected = "";
        var input = "";
        if (this.isMultilocale) {
            input = "LaunchRequest";
            expected = "launchPrompt";
        }
        else {
            if (type === "unit") {
                input = "LaunchRequest";
                expected = "Welcome to " + this.projectName;
            }
            else if (type === "e2e") {
                input = "open " + this.projectName;
                expected = "Welcome to " + this.projectName;
            }
        }
        return {
            "expected": [
                {
                    "action": "prompt",
                    "operator": ":",
                    "value": expected,
                },
            ],
            input: input,
        };
    };
    InitUtil.prototype.getHelpInteraction = function (type, platform) {
        var expectedPrompt = "helpPrompt";
        var expectedCardContent = "helpPrompt";
        var expectedCardTitle = "cardTitle";
        var input = "";
        if (this.isMultilocale) {
            if (type === "unit") {
                input = platform === "alexa" ? "AMAZON.HelpIntent" : "HelpIntent";
            }
            else if (type === "e2e") {
                input = "helpUtterance";
            }
        }
        else {
            if (type === "unit") {
                input = platform === "alexa" ? "AMAZON.HelpIntent" : "HelpIntent";
            }
            else if (type === "e2e") {
                input = "help";
            }
            expectedPrompt = "What can I help you with?";
            expectedCardContent = "What can I help you with?";
            expectedCardTitle = this.projectName;
        }
        return {
            "expected": [
                {
                    "action": "prompt",
                    "operator": ":",
                    "value": expectedPrompt,
                },
                {
                    "action": "cardContent",
                    "operator": ":",
                    "value": expectedCardContent,
                },
                {
                    "action": "cardTitle",
                    "operator": ":",
                    "value": expectedCardTitle,
                },
            ],
            input: input,
        };
    };
    InitUtil.prototype.getTestingJson = function (type) {
        var testingJsonForUnit = {
            handler: "relative or absolute path to your voice app entry point",
            locales: this.locales,
        };
        var testingJsonForE2e = {
            virtualDeviceToken: this.virtualDeviceToken || "[your virtual device token goes here]",
            locales: this.locales,
            type: "e2e",
        };
        if (this.platform === "google") {
            testingJsonForUnit["platform"] = "google";
        }
        return type === "unit" ? testingJsonForUnit : testingJsonForE2e;
    };
    InitUtil.prototype.getHeaderComment = function (type) {
        var link = type === "e2e" ?
            "https://read.bespoken.io/end-to-end/getting-started/" :
            "https://read.bespoken.io/unit-testing/getting-started/";
        var multilocaleComment = "# This is the test file for your " + type + " tests, feel free to copy and modify the template test\n# for your voice app as many times as you want. On this same folder you'll also find a testing.json\n# file, it contains global configurations for future test files you might create in the future.\n# You'll also find a folder called locales, it contains the localization files for all your supported\n# locales. Just put a value to each variable and they will be replaced here. Add, remove or modify\n# as necessary.\n#\n# Find more info on " + link + "\n";
        var singlelocaleComment = "# This is the test file for your " + type + " tests, feel free to copy and modify the template test\n# for your voice app as many times as you want. On this same folder you'll also find a testing.json\n# file, it contains global configurations for future test files you might create in the future.\n#\n# Find more info on " + link + "\n";
        return this.isMultilocale ? multilocaleComment : singlelocaleComment;
    };
    InitUtil.prototype.createMultilocaleFiles = function (type) {
        return __awaiter(this, void 0, void 0, function () {
            var currentFolder, localizedValues;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isMultilocale) {
                            return [2];
                        }
                        currentFolder = process.cwd();
                        if (!fs.existsSync(currentFolder + "/test/" + type + "/locales")) {
                            fs.mkdirSync(currentFolder + "/test/" + type + "/locales");
                        }
                        localizedValues = {
                            testSuiteDescription: "My first unit test suite",
                            firstTestName: "Launch and ask for help",
                            launchPrompt: "Welcome to " + this.projectName,
                            helpPrompt: "What can I help you with?",
                            helpCardContent: "What can I help you with?",
                            helpCardTitle: this.projectName,
                        };
                        return [4, Promise.all(this.locales.split(",").filter(function (x) { return x; }).map(function (locale) {
                                locale = locale.trim();
                                var enOnlyComment = locale === "en-US" ? " for en-US" : "";
                                var comment = "# This is the localization file" + enOnlyComment + ". Please, modify the values so that they align\n# with your voice app responses for this locale\n\n";
                                var localizedFileContent = "";
                                if (locale === "en-US") {
                                    localizedFileContent = Object.keys(localizedValues)
                                        .map(function (key) { return key + ": " + localizedValues[key]; })
                                        .join("\n");
                                }
                                else {
                                    localizedFileContent = Object.keys(localizedValues)
                                        .map(function (key) { return key + ":"; })
                                        .join("\n");
                                }
                                localizedFileContent = "" + comment + localizedFileContent;
                                return _this.writeFile(currentFolder + "/test/" + type + "/locales/" + locale + ".yml", localizedFileContent);
                            }))];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    InitUtil.prototype.writeFile = function (path, toWrite) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                        fs.writeFile(path, toWrite, function (err) {
                            if (err) {
                                reject(err);
                                return;
                            }
                            resolve();
                        });
                    })];
            });
        });
    };
    return InitUtil;
}());
exports.InitUtil = InitUtil;
//# sourceMappingURL=init-util.js.map