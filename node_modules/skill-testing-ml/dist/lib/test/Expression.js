function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = require("lodash");

var Util = require("../util/Util");
/**
 * Represents request expressions used to modify the request before doing the test
 */


var Expression =
/*#__PURE__*/
function () {
  _createClass(Expression, null, [{
    key: "isExpression",

    /**
     *
     * @param {object} element - one of the elements generated during the yaml parsing
     * @return {boolean}
     */
    value: function isExpression(element) {
      var keys = Object.keys(element);
      return keys.length > 0 && keys[0].startsWith("request");
    }
    /**
     *
     * @param {object} element - one of the elements generated during the yaml parsing
     */

  }]);

  function Expression(element) {
    _classCallCheck(this, Expression);

    this._path = Object.keys(element)[0];
    this._value = element[this._path];
  }
  /**
   * the path of the request property we want to modify
   * @return {string}
   */


  _createClass(Expression, [{
    key: "apply",

    /**
     * Replace the property indicated by the expression path with the value indicated
     * @param {object} json - request that we are going to modify
     */
    value: function apply(json) {
      // Chop off the mandatory request at the front
      var paths = this.path.split(".").slice(1);
      var path = paths.join(".");

      _.set(json, path, this.value);
    }
  }, {
    key: "path",
    get: function () {
      return this._path;
    }
    /**
     * the value we want to set in the request property path
     * @return {string}
     */

  }, {
    key: "value",
    get: function () {
      return Util.cleanValue(this._value);
    }
  }]);

  return Expression;
}();

module.exports = Expression;