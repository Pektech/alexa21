function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// We use to print out errors on the console
// Got it from here:
//  https://github.com/facebook/jest/blob/master/packages/jest-jasmine2/src/reporter.js#L103
var _ = require("lodash");

var Configuration = require("./Configuration");

var debug = require("../util/Debug");

var JestMessageUtil = require("jest-message-util");

var Path = require("path");

var Util = require("../util/Util"); // Entry point for Jest to invoke the VirtualAlexaRunner
// Converts between VirtualAlexa responses and Jest responses


module.exports =
/*#__PURE__*/
function () {
  var _testRunner = _asyncToGenerator(function* (globalConfig, config, environment, runtime, testPath) {
    var runnerPath = Path.join(__dirname, "TestRunner.js");
    debug("RunnerPath: " + runnerPath); // It is necessary we call in this way to get code coverage - we use the Jest module loader

    var TestRunner = runtime.requireModule(runnerPath); // This needs to be called here, as well as in the CLI classes, because Jest spawns a new process

    yield Configuration.configure(undefined, undefined, _.get(config, "globals.overrides"));
    var runner = new TestRunner(Configuration.instance().skillTestingConfig());
    var jestResults;
    var passing = 0;
    var failing = 0;
    var pending = 0;
    var doResultsHaveErrorMessages = false;

    try {
      var results = yield runner.run(testPath);
      jestResults = transformResults(results); // Summarize the results

      for (var result of results) {
        if (result.skipped) {
          pending++;
        } else if (result.passed) {
          passing++;
        } else {
          failing++;
        }
      }

      doResultsHaveErrorMessages = jestResults.some(jestResult => jestResult.failureMessages && jestResult.failureMessages.length);
    } catch (e) {
      failing = 1;
      jestResults = [asJestResult(e.test, e.message, e.interaction)];
    }

    var allTestsSkipped = failing + passing === 0; // This means tests are skipped by ignoring external errors and everything failed

    if (allTestsSkipped && doResultsHaveErrorMessages) {
      failing = 1;
    }

    var failureMessage = JestMessageUtil.formatResultsErrors(jestResults, config, globalConfig, testPath);
    return {
      console: null,
      displayName: "Display name",
      failureMessage,
      leaks: false,
      memoryUsage: 0,
      numFailingTests: failing,
      numPassingTests: passing,
      numPendingTests: pending,
      skipped: !doResultsHaveErrorMessages && allTestsSkipped,
      snapshot: {
        added: 0,
        fileDeleted: false,
        matched: 0,
        unchecked: 0,
        uncheckedKeys: [],
        unmatched: 0,
        updated: 0
      },
      sourceMaps: {},
      testExecError: undefined,
      testFilePath: testPath,
      testResults: jestResults
    };
  });

  function testRunner(_x, _x2, _x3, _x4, _x5) {
    return _testRunner.apply(this, arguments);
  }

  return testRunner;
}();

function transformResults(results) {
  var jestResults = []; // Create an array of Jest results - we transform our results into this

  for (var result of results) {
    if (result.interactionResults.length > 0) {
      for (var interactionResult of result.interactionResults) {
        var jestResult = asJestResult(result.test, interactionResult.error, interactionResult.interaction, result.locale, result.skipped, interactionResult.timestamp, interactionResult.errors);
        jestResults.push(jestResult);
      }
    } else {
      var _jestResult = asJestResult(result.test, undefined, undefined, result.locale, result.skipped);

      jestResults.push(_jestResult);
    }
  }

  return jestResults;
}

function addTimestampToError(errorMessage, timestamp) {
  var error = errorMessage;

  if (timestamp) {
    error = error + "\nTimestamp:\n\t"; // eslint-disable-next-line spellcheck/spell-checker

    error = error + Util.formatDate(timestamp);
  }

  return error;
}

function asJestResult(test, errorMessage, interaction, locale, skipped, timestamp, multipleErrors) {
  var errors = [];
  var status = "passed";

  if (errorMessage && !multipleErrors) {
    errors.push(addTimestampToError(errorMessage, timestamp));
    status = "failed";
  }

  if (multipleErrors) {
    var multipleErrorsWithTimestamp = multipleErrors.map(assertionError => {
      return addTimestampToError(assertionError, timestamp);
    });
    errors.push(...multipleErrorsWithTimestamp);
    status = "failed";
  }

  var mainAncestor = test && test.testSuite.description ? `${test.testSuite.description} (${locale})` : locale;
  var ancestors = test ? [mainAncestor, test.description] : [];
  var title = interaction ? interaction.utterance : "Global";
  var duration = interaction ? interaction.duration : 0;

  if (skipped) {
    status = "pending";
  }

  if (skipped && !errorMessage) {
    title = "";
  }

  return {
    ancestorTitles: ancestors,
    duration: duration,
    failureMessages: errors,
    location: {
      column: 0,
      line: 0
    },
    numPassingAsserts: 0,
    status: status,
    title: title
  };
}